getBean is for creating object and it is a interface
@Component means im responsible for creating class
@Autowired automatically inject the dependency
@Scope("prototype") it allows us to create diffrent object for diffrent request
@controller it says to spring that it is a controller
@RequestMapping used to set a path
@RequestPram used to get data from request
@GetMapping  used to retrive information from the server
@PostMapping  used to send data to the server to create/update a resource
@Query it is used for assiging query in repo
@ResponseBody used to send actual data not jpa file
@PathVariable used to get data from url




Repository is used  for connecting the database;
MVC => model view controller

model -holds the data (POJO)
controller - handles accept the request and sends the responsible (before mvc servelet for this )
* one controller can have multiple request but servelet have one request for only one server
view - displays the data (before JPA for view )

ORM -Object Relational Mapping
to implement ORM we need to use JPA (Java Persistence API)
Spring applicaton --->hibernate(to connect with database)--->Database(SQL,MySQL...etc) and ORM to connect with database

to connect with database we have two methods 1)JDBC 2)Hibernate

REST -REpresentational State Transfer
it use HTTP methods(GET,POST,PUT,DELETE)

AOP - Aspect Oriented Programming 
concept of AOP
1)Aspect -one class have all the methods 
2)Advice - method can be before or after
3)Pointcut -
4)Joinpoint -
5)Introduction - 
6)Target object
7)AOP proxy
8)Weaving

Types of advice:
Before
After --after returning,after throwing,Default after(finally)
Around

Spring Security

Authentication means Who are you ?
Authorization means your role like user and admin

Bcrypt

HttpSecurity used for form login

security oAuth2  is an authorization protocol that allows applications to access user data on a web server without the user sharing their credentials. It's the industry standard for online authorization and is used by APIs from GitHub

oAuth2 is a google login

MICROSERVICES

monolithic application 
advantage -
-lot of services in one application
everything in one place all services they are designed by other members you can simply call them
and you can form a particular package and deploy them

disadvantage -
team dependency
Scalability

MICROSERVICES
in microservices if you have 10 service  each service is a microservice and each services is self contained they should be deployed in separately and they should be scale separately


